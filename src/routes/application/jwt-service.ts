import { Request, Response } from "express";
import { UserDBType, ResultTokenType } from "../../repositories/types";
import jwt  from 'jsonwebtoken'
import { settings } from "../../repositories/settings";

// type ResultTokenType = {
//   resultCode: number
//   token: string
// }

export const jwtService = {
  async createJWT(obj: UserDBType): Promise<ResultTokenType> {
    console.log('13 jwt-service.ts ', settings.JWT_SECRET);
    
    const token = jwt.sign({userId: obj.accountData.id}, settings.JWT_SECRET, {expiresIn: '1h'} )
    return { resultCode: 0,
            token: token
    }
  },

  async getUserIdByToken(token: string): Promise<string | null>{
    try{
      const result: any = jwt.verify(token, settings.JWT_SECRET)
       console.log('24 jwt-service result', result);      
      return result.userId
    } catch(error) {
      return null
    }    
  }
}

// Вот пример того, как приложение может использовать токены обновления JWT 
// в приложении Node.js:

// 1. Пользователь входит в приложение и отправляет свои учетные данные на 
//    сервер аутентификации.

// 2. Сервер аутентификации проверяет учетные данные, создает маркер доступа 
//    JWT и маркер обновления JWT. Маркер доступа содержит утверждения 
//    пользователя (например, идентификатор пользователя, роль и т. д.), а 
//    маркер обновления содержит утверждение, указывающее время истечения 
//    срока действия маркера доступа.
// 3. Сервер аутентификации отправляет токен доступа и токен обновления клиенту.

// 4. Клиент хранит токены в локальном хранилище или в виде безопасного 
//    файла cookie только для HTTP.

// 5. Клиент отправляет токен доступа с каждым запросом на доступ к защищенным 
//    ресурсам.

// 6. Когда срок действия токена доступа истекает, клиент отправляет токен 
//    обновления на сервер аутентификации, чтобы получить новый токен доступа.

// 7. Сервер аутентификации проверяет токен обновления и проверяет утверждение 
//    срока действия. Если токен обновления действителен и срок его действия 
//    не истек, сервер аутентификации выдает новый токен доступа с новым 
//    сроком действия.

// 8. Сервер аутентификации отправляет новый токен доступа клиенту.

// 9. Клиент сохраняет новый токен доступа и продолжает использовать его для 
//    доступа к защищенным ресурсам.

// В этом примере JWT используется в качестве автономных токенов обновления, 
// которые можно хранить на стороне клиента и использовать для проверки 
// подлинности и авторизации пользователей в нескольких доменах.